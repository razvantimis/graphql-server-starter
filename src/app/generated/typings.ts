/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */


import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreatUser: { // input type
    email?: string | null; // String
    fullName?: string | null; // String
    password?: string | null; // String
    role?: NexusGenEnums['UserRole'] | null; // UserRole
  }
}

export interface NexusGenEnums {
  UserRole: "Admin"
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  User: { // root type
    createdAt: any; // Date!
    email: string; // String!
    firebaseUid: string; // String!
    fullName: string; // String!
    id: number; // Int!
    isEnabled?: boolean | null; // Boolean
    role: NexusGenEnums['UserRole']; // UserRole!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CreatUser: NexusGenInputs['CreatUser'];
  UserRole: NexusGenEnums['UserRole'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    creatUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    hello: string; // String!
    UserInstanceByToken: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    createdAt: any; // Date!
    email: string; // String!
    firebaseUid: string; // String!
    fullName: string; // String!
    id: number; // Int!
    isEnabled: boolean | null; // Boolean
    role: NexusGenEnums['UserRole']; // UserRole!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    creatUser: { // args
      resource?: NexusGenInputs['CreatUser'] | null; // CreatUser
    }
  }
  Query: {
    hello: { // args
      name?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "User";

export type NexusGenInputNames = "CreatUser";

export type NexusGenEnumNames = "UserRole";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}